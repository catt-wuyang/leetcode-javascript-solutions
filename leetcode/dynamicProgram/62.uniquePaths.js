/**
 * 62.不同路径
 *
 * 描述：给定一个长宽为 n*m 的长方形网格，
 * 起点在左上角，终点在右下角，问共有多少种路径走法
 * 限制每次移动只能向右或向下移动
 *
 * 示例：
 * 输入：m = 3 n = 7
 * 输出：28
 *
 * 输入：m = 3 n = 2
 * 输出：3
 */

/**
 * 动态规划
 *
 * dp[i][j] 表示从左上角走到第(i, j)网格单元时的路径数，
 * 其中 i 范围 [0,m)，j 范围 [0,n)
 * 确定 dp 的初始值，n 为长，m 为宽，构建多维数组，填充元素全部为 1
 * 递推公式，由于想要走到第(i, j)网格单元时，仅能向下走(i-1,j)
 * 向右走(i,j-1) 所以dp(i,j) = dp(i-1,j) + dp(i,j-1)
 * 最终走(m-1, n-1) 因为取不到(m,n)
 * 整体思考初始值、循环、返回值的边界条件
 *
 */
const uniquePaths = function (m, n) {
  const dp = new Array(m).fill().map(() => {
    return new Array(n).fill(1);
  });
  for (let i = 1; i < m; i++) {
    for (let j = 1; j < n; j++) {
      dp[i][j] = dp[i][j - 1] + dp[i - 1][j];
    }
  }
  return dp[m - 1][n - 1];
};
