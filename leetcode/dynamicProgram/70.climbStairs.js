/**
 * 70.爬楼梯
 *
 * 描述：假设正在爬 n 阶的楼梯，每次只可以爬1个或2个台阶，有多少种不同的爬法
 *
 * 示例：
 * 输入：n = 2
 * 输出：2
 * 1阶+1阶、2阶
 *
 * 输入：n = 3
 * 输出：3
 * 1阶+1阶+1阶
 * 1阶+2阶
 * 2阶+1阶
 *
 * 输入：n = 4
 * 输出：5
 * 1阶+1阶+1阶
 * 2阶+2阶
 * 1阶+2阶+1阶
 * 1阶+1阶+2阶
 * 2阶+1阶+1阶
 */

/**
 * 动态规划
 * 思路就是从后往前想递推公式，发现就是斐波那契数列 1 1 2 3 5 8
 * n-1 阶时 + 1 就到顶了
 * n-2 阶时 + 2 就到顶了
 *
 * 时间复杂度是 O(n)
 */
const climbStairs = function (n) {
  let dp = [];
  dp[0] = 1;
  dp[1] = 1;

  for (let i = 2; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }
  return dp[n];
};
