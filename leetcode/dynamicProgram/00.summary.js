/**
 * 动态规划
 */

/**
 * 解题思路：
 * 1.确定是否可以动态规划算法解题
 * 2.清楚 dp[i] 表示含义
 * 3.边界条件
 * 4.确定 dp 初始值
 *   const dp = new Array(n+1).fill(0)
 *   const dp = [0, 1]
 * 5.循环
 *    for(let i = 2; i <= n; i++) {
 *      dp[i] = ? // 递推公式
 *    }
 * return dp[?]
 */

/**
 * 题目汇总(11)
 *
 * 53.最大子数组和
 * 62.不同路径
 * 63.有障碍的不同路径
 * 64.最小路径和
 * 70.爬楼梯
 * 121.买卖股票的最佳时机
 * 300.最长递增子序列
 * 322.兑换零钱
 * 338.二进制计数
 * 509.斐波那契数列
 * 746.使用最小花费爬楼梯
 */
