/**
 * 动态规划
 */

/**
 * 解题思路：
 * 1.确定是否可以动态规划算法解题
 * 2.清楚 dp[i] 表示含义
 * 3.边界条件
 * 4.确定 dp 初始值
 *   const dp = new Array(n+1).fill(0)
 *   const dp = [0, 1]
 * 5.循环
 *    for(let i = 2; i <= n; i++) {
 *      dp[i] = ? // 递推公式
 *    }
 * return dp[?]
 */

/**
 * 题目汇总(14)
 *
 * 经典
 *    509.斐波那契数列
 * 爬楼梯
 *    70.爬楼梯
 *    746.使用最小花费爬楼梯
 * 兑零钱
 *    322.兑换零钱
 * 买卖股票
 *    121.买卖股票的最佳时机（只能买卖一次）
 *    122.买卖股票的最佳时机II（可以买卖多次）
 *    123.买卖股票的最佳时机III（最多买卖两次）
 *    188.买卖股票的最佳时机IV（最多买卖k次）
 *    309.买卖股票的最佳时机V（可以买卖多次，卖出有一天冷冻期）
 *    714.买卖股票的最佳时机VI（可以买卖多次，包含手续费）
 * 打家劫舍
 *    198.打家劫舍
 *    213.打家劫舍II
 *    337.打家劫舍III
 * 路径选择
 *    62.不同路径
 *    63.有障碍的不同路径
 *    64.最小路径和
 * 其他
 *    300.最长递增子序列
 *    53.最大子数组和
 *    338.二进制计数
 */
