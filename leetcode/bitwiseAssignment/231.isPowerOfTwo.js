/**
 * 231.2的次幂
 *
 * 描述：给定一个整数 n，判断该整数是否是 2 的次幂，如果是返回 true 否则返回 false
 *
 * 示例：
 * 输入：n = 1
 * 输出：true  2的0次幂是1
 *
 * 输入：n = 16
 * 输出：true  2的4次幂是16
 *
 * 输入：n = 3
 * 输出：false 无法找到2的几次幂是3
 */

/**
 * 常规解法
 *
 * 依次遍历 n/2 直至 n<0 如果最后 n 为 1 就说明除2除尽了
 * n 就是2的几次幂，例如 n = 16
 * n = 16 8 4 2 1
 * n = 3 1.5
 */
const isPowerOfTwo = function (n) {
  while (n > 0) {
    if (n === 1) {
      return true;
    }
    n = n / 2;
  }
  return false;
};

/**
 * 位运算解法
 *
 * 找到2的次幂的二进制数的规律，是1的位置都是在第一位，其余都是0
 * 2的0次幂是1  1 & 0 = 0
 * 2的1次幂是2  10 & 01 = 00
 * 2的2次幂是4  100 & 011 = 000
 * 2的3次幂是8  1000 & 0111 = 0000
 * 2的4次幂是16 10000 & 01111 = 00000
 *
 * 利用 n 与 n-1 的关系，所有位置的 0 和 1 都是反向的
 */
const isPowerOfTwoBetter = function (n) {
  return n > 0 && (n & (n - 1)) === 0;
};
